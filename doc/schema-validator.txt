*schema-validator.txt*                                Last change: 2025 May 18

==============================================================================
Table of Contents                         *schema-validator-table-of-contents*

Values compared with the `type` function  |schema-validator-values-compared-with-the-`type`-function|
Tables with a set number of items (tuples)  |schema-validator-tables-with-a-set-number-of-items-(tuples)|
Tables with an arbitrary number of items  |schema-validator-tables-with-an-arbitrary-number-of-items|
Optional ......................................... |schema-validator-optional|
Custom validators ....................... |schema-validator-custom-validators|
`literal` ......................................... |schema-validator-literal|
`union` ............................................. |schema-validator-union|

==============================================================================
SCHEMA-VALIDATOR.NVIM                 *schema-validator-schema-validator.nvim*


A schema validator for your Neovim plugins.

Built for Neovim to use the `vim.*` helper functions.

  All examples return `true`


                                                                              
VALUES COMPARED WITH THE `TYPE` FUNCTION*schema-validator-values-compared-with-the-`type`-function*

>lua
    validate({ type = "nil", }, nil)
    validate({ type = "number", }, 123)
    validate({ type = "string", }, "hello")
    validate({ type = "boolean", }, true)
    validate({ type = "function", }, function() end)
    validate({ type = "any", }, --[[anything]])
<

                                                                              
TABLES WITH A SET NUMBER OF ITEMS (TUPLES)*schema-validator-tables-with-a-set-number-of-items-(tuples)*

>lua
    validate(
      {
        type = "table",
        entries = {
          first = { type = "string", },
          { type = "number", },
        },
      },
      { first = "hello", 123, }
    )
<

                                                                              
TABLES WITH AN ARBITRARY NUMBER OF ITEMS*schema-validator-tables-with-an-arbitrary-number-of-items*

>lua
    validate(
      {
        type = "table",
        entries = "number",
      },
      { 1, 2, 3, 4, }
    )
    validate(
      {
        type = "table",
        entries = "number",
      },
      { 1, nil, 3, 4, } -- `true` because `nil` is ignored by `pairs`
    )
<

                                                                              
OPTIONAL                                           *schema-validator-optional*

>lua
    validate({ type = "number", optional = true }, nil)
    validate(
      {
        type = "table",
        entries = {
          first = { type = "string", optional = true },
          { type = "number", },
        },
      },
      { first = nil, 123, } -- `optional` can either mean the value of the entry
    )
    validate(
      {
        type = "table",
        entries = {
          first = { type = "string", optional = true },
          { type = "number", },
        },
      },
      { nil, 123, } -- or `optional` can mean the entry itself
    )
<

                                                                              
CUSTOM VALIDATORS                         *schema-validator-custom-validators*

>lua
    -- a function that takes the value to be validated as an argument and returns a boolean
    validate({ type = function(val) return val % 2 == 0 end, }, 2)
<

                                                                              
`LITERAL`                                           *schema-validator-literal*

>lua
    validate({ type = literal "hello", }, "hello")
    validate({ type = literal { 1, 2, 3 }, }, { 1, 2, 3, })
<

                                                                              
`UNION`                                               *schema-validator-union*

>lua
    validate(
      {
        type = union {
          { type = "string", },
          { type = "boolean", },
        },
      },
      "hello"
    )
    validate(
      {
        type = union {
          { type = "string", },
          { type = "boolean", },
        },
      },
      true
    )
<

vim:tw=78:ts=8:ft=help:norl: